name: Deploy

on:
  workflow_call:
    inputs:
      host:
        required: true
        type: string
      username:
        required: true
        type: string
      ssh_key:
        required: true
        type: string
      registry:
        required: true
        type: string
      repository:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      aliyun_username:
        required: false
        type: string
      aliyun_password:
        required: false
        type: string
      working_directory:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ inputs.host }}
          username: ${{ inputs.username }}
          key: ${{ inputs.ssh_key }}
          script: |
            if [[ "${{ inputs.registry }}" == *.aliyuncs.com* ]]; then
              sudo docker login ${{ inputs.registry }} -u ${{ inputs.aliyun_username }} --password ${{ inputs.aliyun_password }}
            else
              sudo aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
                sudo docker login --username AWS --password-stdin ${{ inputs.registry }}
            fi

            cd ${{ inputs.working_directory }}

            # Update docker-compose.yml with the new tag
            if [[ "${{ inputs.image_tag }}" != "latest" ]]; then
              echo "Updating chatbot image tag to: ${{ inputs.image_tag }}"
              sed -i "s|${{ inputs.repository }}:[0-9]*\.[0-9]*\.[0-9]*|${{ inputs.repository }}:${{ inputs.image_tag }}|g" docker-compose.yml
            else
              echo "Not a tag push â€” skipping image tag update"
            fi

            # Pull and restart containers
            echo "Pulling and restarting containers..."
            sudo docker compose pull
            sudo docker compose up -d

            # Clean up unused Docker resources
            echo "Cleaning up unused Docker resources..."
            if [[ "${{ inputs.image_tag }}" != "latest" ]]; then
              sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ inputs.repository }}" | while read -r image; do
                TAG=$(echo "$image" | awk -F: '{print $2}')
                if [[ "$TAG" == "${{ inputs.image_tag }}" || "$TAG" == "latest" ]]; then
                  echo "Skipping tag: $image"
                  continue
                fi
                echo "Deleting image: $image"
                sudo docker rmi "$image"
              done
            fi

            sudo docker system prune -f
